/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace ORMapping
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public partial class TCountry 
	{
		#region Private Members
		
		// Variabili di stato
		private bool _isChanged;
		private bool _isDeleted;

		// Primary Key(s) 
		private string _country_code; 
		
		// Properties 
		private string _country_name; 
		private string _currency_code; 
		private string _lang_code; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public TCountry()
		{
			_country_code = String.Empty; 
			_country_name = String.Empty; 
			_currency_code = String.Empty; 
			_lang_code = String.Empty; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public TCountry(string country_code, string country_name, string currency_code, string lang_code)
		{
			_country_code = country_code; 
			_country_name = country_name; 
			_currency_code = currency_code; 
			_lang_code = lang_code; 
		}
		
		#endregion // End Full Constructor
		
		#region Required Fields Only Constructor
		
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public TCountry(string country_code, string country_name, string currency_code)
		{
			_country_code = country_code; 
			_country_name = country_name; 
			_currency_code = currency_code; 
			_lang_code = String.Empty; 
		}
		
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 国家代码
		/// </summary>		
		public virtual string CountryCode
		{
			get { return _country_code; }
			set	
			{
				if ( string.IsNullOrEmpty(value) )
					throw new ArgumentOutOfRangeException("国家代码不能为空！");
				
				if( value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for CountryCode", value, value.ToString());
				
				_isChanged |= (_country_code != value); _country_code = value;
			}
		} 
	  
		/// <summary>
		/// 国家名称
		/// </summary>		
		public virtual string CountryName
		{
			get { return _country_name; }
			set	
			{
				if ( string.IsNullOrEmpty(value) )
					throw new ArgumentOutOfRangeException("国家名称不能为空！");
				
				if( value.Length > 75)
					throw new ArgumentOutOfRangeException("Invalid value for CountryName", value, value.ToString());
				
				_isChanged |= (_country_name != value); _country_name = value;
			}
		} 
	  
		/// <summary>
		/// 货币代码
		/// </summary>		
		public virtual string CurrencyCode
		{
			get { return _currency_code; }
			set	
			{
				if ( string.IsNullOrEmpty(value) )
					throw new ArgumentOutOfRangeException("货币代码不能为空！");
				
				if( value.Length > 3)
					throw new ArgumentOutOfRangeException("Invalid value for CurrencyCode", value, value.ToString());
				
				_isChanged |= (_currency_code != value); _currency_code = value;
			}
		} 
	  
		/// <summary>
		/// 语言Code
		/// </summary>		
		public virtual string LangCode
		{
			get { return _lang_code; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for LangCode", value, value.ToString());
				
				_isChanged |= (_lang_code != value); _lang_code = value;
			}
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			TCountry castObj = (TCountry)obj; 
			return ( castObj != null ) &&
				( this._country_code == castObj.CountryCode );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this._country_code.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}